#version 410 core

layout(quads, equal_spacing, ccw) in;

in vec3 tesscontrol_pos[];
in vec3 tesscontrol_norm[];
in vec2 tesscontrol_tex[];

out vec3 view_pos;
out vec2 tex_coord;
out vec3 world_pos;
out vec4 lightview_pos;

uniform mat4 mvp;
uniform mat4 mv;
uniform mat4 m;
uniform mat4 mvp_light;
uniform sampler2D displacement_map;
uniform float displacement_scale = 10.0;

vec3 interpolate( vec3 v0, vec3 v1, vec3 v2, vec3 v3 )
{
    
    vec3 a = mix( v0, v1, gl_TessCoord.x );
    vec3 b = mix( v3, v2, gl_TessCoord.x );
    return mix( a, b, gl_TessCoord.y );
}

vec2 interpolate2D( vec2 v0, vec2 v1, vec2 v2, vec2 v3 )
{
    
    vec2 a = mix( v0, v1, gl_TessCoord.x );
    vec2 b = mix( v3, v2, gl_TessCoord.x );
    return mix( a, b, gl_TessCoord.y );
}

void main(void)
{
    vec3 tesseval_pos = interpolate( tesscontrol_pos[0], tesscontrol_pos[1], tesscontrol_pos[2], tesscontrol_pos[3]);
    vec3 tesseval_norm = interpolate( tesscontrol_norm[0], tesscontrol_norm[1], tesscontrol_norm[2], tesscontrol_norm[3]);
    vec2 tesseval_tex = interpolate2D( tesscontrol_tex[0], tesscontrol_tex[1], tesscontrol_tex[2], tesscontrol_tex[3]);
    float displacement_value = texture(displacement_map, tesseval_tex).r;
    vec3 displaced_pos = tesseval_pos + displacement_value * displacement_scale * tesseval_norm;
    gl_Position = mvp * vec4(displaced_pos, 1.0);
    view_pos = vec3(mv * vec4(displaced_pos, 1.0));
    world_pos = vec3(m * vec4(displaced_pos, 1.0));
    tex_coord = tesseval_tex;
    lightview_pos = mvp_light * vec4(displaced_pos, 1.0);
}